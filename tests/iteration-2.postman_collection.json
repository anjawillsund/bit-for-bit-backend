{
	"info": {
		"_postman_id": "f2c6ef2b-499a-4a0c-b67a-0be39fea0a2f",
		"name": "Bit FÃ¶r Bit",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "24606009"
	},
	"item": [
		{
			"name": "Create user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let newUsername = 'User' + pm.collectionVariables.get(\"nextUserNumber\");",
							"let newPassword = 'MyPassword' + pm.collectionVariables.get(\"nextUserNumber\");",
							"pm.collectionVariables.set(\"newUsername\", newUsername);",
							"pm.collectionVariables.set(\"newPassword\", newPassword);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"User creation success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Your account was created successfully. Please log in.\");",
							"});",
							"",
							"if (pm.response.code === 201) {",
							"    let nextUserNumber = parseInt(pm.collectionVariables.get(\"nextUserNumber\"));",
							"    nextUserNumber+=1;",
							"    pm.collectionVariables.set(\"nextUserNumber\", nextUserNumber)",
							"    let username = pm.collectionVariables.get(\"newUsername\");",
							"    let password = pm.collectionVariables.get(\"newPassword\");",
							"    pm.collectionVariables.set(\"username\", username);",
							"    pm.collectionVariables.set(\"password\", password);",
							"    console.log(username, password)",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{newUsername}}\",\n    \"password\": \"{{newPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with existing username",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let userNumber = parseInt(pm.collectionVariables.get(\"nextUserNumber\"));",
							"userNumber-=1;",
							"let username = 'User' + userNumber;",
							"let password = 'MyPassword' + userNumber;",
							"pm.collectionVariables.set(\"newUsername\", username);",
							"pm.collectionVariables.set(\"newPassword\", password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User creation success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"The username is not available.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{newUsername}}\",\n    \"password\": \"{{newPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user without username",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let password = 'MyPassword' + pm.collectionVariables.get(\"nextUserNumber\");",
							"pm.collectionVariables.set(\"newPassword\", password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User creation success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User validation failed: username: Path `username` is required.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"\",\n    \"password\": \"{{newPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with too long username",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let password = 'MyPassword' + pm.collectionVariables.get(\"nextUserNumber\");",
							"pm.collectionVariables.set(\"newPassword\", password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User creation success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"The username must not contain more than 50 characters.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"ThisIsALongUsernameThatContainsMoreThanFiftyCharacters\",\n    \"password\": \"{{newPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with username that has non-allowed characters",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let password = 'MyPassword' + pm.collectionVariables.get(\"nextUserNumber\");",
							"pm.collectionVariables.set(\"newPassword\", password);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User creation success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User validation failed: username: The username must only contain letters and numbers.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"my.username\",\n    \"password\": \"{{newPassword}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user without password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let username = 'User' + pm.collectionVariables.get(\"nextUserNumber\");",
							"pm.collectionVariables.set(\"newUsername\", username);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User creation success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"User validation failed: password: Path `password` is required.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{newUsername}}\",\n    \"password\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with too short password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let username = 'User' + pm.collectionVariables.get(\"nextUserNumber\");",
							"pm.collectionVariables.set(\"newUsername\", username);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User creation success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"The password must contain at least 10 characters.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{newUsername}}\",\n    \"password\": \"password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Create user with too long password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"let username = 'User' + pm.collectionVariables.get(\"nextUserNumber\");",
							"pm.collectionVariables.set(\"newUsername\", username);",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"User creation success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"The password must not contain more than 2000 characters.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{newUsername}}\",\n    \"password\": \"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/create",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"create"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login user",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"User login success message\", function () {",
							"    let username = pm.collectionVariables.get(\"username\");",
							"    pm.expect(jsonData.message).to.eql(\"Welcome \" + username + \"! You are now logged in.\");",
							"});",
							"",
							"pm.test(\"Access token is present and valid\", function () {",
							"    pm.expect(jsonData).to.have.property('token');",
							"    // Basic check for JWT structure",
							"    let tokenParts = jsonData['token'].split('.');",
							"    pm.expect(tokenParts.length).to.eql(3);",
							"});",
							"",
							"if (jsonData.token) {",
							"    const accessToken = jsonData.token;",
							"    pm.collectionVariables.set(\"accessToken\", accessToken);",
							"}"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login without username",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"User login failed message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Invalid login attempt. Please try again.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login without password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"User login failed message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Invalid login attempt. Please try again.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with wrong password",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"User login failed message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Invalid login attempt. Please try again.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"{{username}}\",\n    \"password\": \"password\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Login with non-existing username",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 401\", function () {",
							"    pm.response.to.have.status(401);",
							"});",
							"",
							"pm.test(\"User login failed message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Invalid login attempt. Please try again.\");",
							"});"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\n    \"username\": \"username\",\n    \"password\": \"{{password}}\"\n}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/login",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"login"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"if (jsonData.id) {",
							"    pm.collectionVariables.set(\"puzzleId\", jsonData.id);",
							"}",
							"",
							"pm.test(\"Status code is 201\", function () {",
							"    pm.response.to.have.status(201);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"id\", \"message\");",
							"});",
							"",
							"pm.test(\"Puzzle id has correct format\", function () {",
							"    pm.expect(jsonData.id).to.match(/^[0-9a-fA-F]{24}$/);",
							"});",
							"",
							"pm.test(\"Add puzzle success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle added successfully.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const numberOfPieces = Math.floor(Math.random() * 20000) + 1;",
							"pm.collectionVariables.set(\"numberOfPieces\", numberOfPieces)",
							"const size = Math.floor(Math.random() * 100000) + 1;",
							"pm.collectionVariables.set(\"size\", size)",
							"const missingPieces = Math.floor(Math.random() * (numberOfPieces - 1)) + 1;",
							"pm.collectionVariables.set(\"missingPieces\", missingPieces)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text"
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text"
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text"
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text"
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text"
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text"
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text"
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text"
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text"
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text"
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text"
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - title missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: title: Path `title` is required.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - title too long",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: title: The title must not contain more than 100 characters.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "This is a long title that needs to include a lot of characters and spaces because it needs to contain more than 100 characters to prove that the request will fail.",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - too few pieces",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: piecesNumber: Validator failed for path `piecesNumber` with value `1`\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "1",
							"type": "text"
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - too many pieces",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: piecesNumber: Validator failed for path `piecesNumber` with value `20001`\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const numberOfPieces = Math.floor(Math.random() * 20000) + 1;",
							"pm.collectionVariables.set(\"numberOfPieces\", numberOfPieces)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "20001",
							"type": "text"
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - pieces contain non-numbers",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: piecesNumber: Cast to Number failed for value \\\"200st\\\" (type string) at path \\\"piecesNumber\\\"\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const numberOfPieces = Math.floor(Math.random() * 20000) + 1;",
							"pm.collectionVariables.set(\"numberOfPieces\", numberOfPieces)",
							"const size = Math.floor(Math.random() * 100000) + 1;",
							"pm.collectionVariables.set(\"size\", size)",
							"const missingPieces = Math.floor(Math.random() * (numberOfPieces - 1)) + 1;",
							"pm.collectionVariables.set(\"missingPieces\", missingPieces)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "200st",
							"type": "text"
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - sizeWidth missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: sizeHeight: If 'sizeHeight' is provided, 'sizeWidth' must also be provided. 'sizeHeight' must not be larger than 100 000.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const size = Math.floor(Math.random() * 100000) + 1;",
							"pm.collectionVariables.set(\"size\", size)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text"
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - sizeWidth too large",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: sizeHeight: If 'sizeHeight' is provided, 'sizeWidth' must also be provided. 'sizeHeight' must not be larger than 100 000.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const size = Math.floor(Math.random() * 100000) + 1;",
							"pm.collectionVariables.set(\"size\", size)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "100001",
							"type": "text"
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text"
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - sizeWidth too small",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: sizeHeight: If 'sizeHeight' is provided, 'sizeWidth' must also be provided. 'sizeHeight' must not be larger than 100 000., sizeWidth: If 'sizeWidth' is provided, 'sizeHeight' must also be provided. 'sizeWidth' must not be larger than 100 000.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const size = Math.floor(Math.random() * 100000) + 1;",
							"pm.collectionVariables.set(\"size\", size)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "0",
							"type": "text"
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text"
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - sizeHeight missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: sizeWidth: If 'sizeWidth' is provided, 'sizeHeight' must also be provided. 'sizeWidth' must not be larger than 100 000.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const size = Math.floor(Math.random() * 100000) + 1;",
							"pm.collectionVariables.set(\"size\", size)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text"
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - sizeHeight too large",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: sizeWidth: If 'sizeWidth' is provided, 'sizeHeight' must also be provided. 'sizeWidth' must not be larger than 100 000.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const size = Math.floor(Math.random() * 100000) + 1;",
							"pm.collectionVariables.set(\"size\", size)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text"
						},
						{
							"key": "sizeWidth",
							"value": "100001",
							"type": "text"
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - sizeHeight too small",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: sizeHeight: If 'sizeHeight' is provided, 'sizeWidth' must also be provided. 'sizeHeight' must not be larger than 100 000., sizeWidth: If 'sizeWidth' is provided, 'sizeHeight' must also be provided. 'sizeWidth' must not be larger than 100 000.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const size = Math.floor(Math.random() * 100000) + 1;",
							"pm.collectionVariables.set(\"size\", size)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text"
						},
						{
							"key": "sizeWidth",
							"value": "0",
							"type": "text"
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - manufacturer missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: manufacturer: Validator failed for path `manufacturer` with value ``\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "",
							"type": "text"
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - manufacturer too long",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: manufacturer: The manufacturer must not contain more than 50 characters.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "This is a ridiculously long name for a simple puzzle manufacturer",
							"type": "text"
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - manufacturer contains forbidden characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: manufacturer: Validator failed for path `manufacturer` with value `Manu & Facture`\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "Manu & Facture",
							"type": "text"
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - lastPlayed includes letters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: lastPlayed: Cast to date failed for value \\\"2024-01-01am\\\" (type string) at path \\\"lastPlayed\\\"\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "2024-01-01am",
							"type": "text"
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - location missing",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: location: Validator failed for path `location` with value ``\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "",
							"type": "text"
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - location too long",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: location: The location must not contain more than 100 characters.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "This is a ridiculously long description of where the puzzle is located, just to prove that it's not possible to add a puzzle with a location that is too long.",
							"type": "text"
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - location contains forbidden characters",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle failed message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: location: Validator failed for path `location` with value `Here & there`\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png"
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "Here & there",
							"type": "text"
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text",
							"disabled": true
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Add puzzle - piecesNumber missing, complete false, no missing pieces",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();",
							"",
							"pm.test(\"Status code is 400\", function () {",
							"    pm.response.to.have.status(400);",
							"});",
							"",
							"pm.test(\"Puzzle details are correctly structured\", function () {",
							"    pm.expect(jsonData).to.have.keys(\"message\");",
							"});",
							"",
							"pm.test(\"Add puzzle success message\", function () {",
							"    pm.expect(jsonData.message).to.eql(\"Puzzle validation failed: missingPiecesNumber: The number of missing pieces must not be 0 or greater than the total number of pieces.\");",
							"});",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				},
				{
					"listen": "prerequest",
					"script": {
						"exec": [
							"const numberOfPieces = Math.floor(Math.random() * 20000) + 1;",
							"pm.collectionVariables.set(\"numberOfPieces\", numberOfPieces)",
							"const missingPieces = Math.floor(Math.random() * (numberOfPieces - 1)) + 1;",
							"pm.collectionVariables.set(\"missingPieces\", missingPieces)",
							""
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "POST",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/Users/anjawillsund/Desktop/Screenshot 2024-03-18 at 10.45.42.png",
							"disabled": true
						},
						{
							"key": "title",
							"value": "{{$randomLoremSentence}}",
							"type": "text"
						},
						{
							"key": "piecesNumber",
							"value": "{{numberOfPieces}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeHeight",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sizeWidth",
							"value": "{{size}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "manufacturer",
							"value": "{{$randomCompanyName}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lastPlayed",
							"value": "{{$randomDatePast}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "location",
							"value": "{{$randomLoremSentence}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "complete",
							"value": "false",
							"type": "text"
						},
						{
							"key": "missingPiecesNumber",
							"value": "{{missingPieces}}",
							"type": "text"
						},
						{
							"key": "privateNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "sharedNote",
							"value": "{{$randomLoremParagraph}}",
							"type": "text",
							"disabled": true
						},
						{
							"key": "isLentOut",
							"value": "true",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutTo",
							"value": "660ff2de8cb6c9de5b9e48f4",
							"type": "text",
							"disabled": true
						},
						{
							"key": "lentOutToString",
							"value": "{{$randomFirstName}}",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "{{baseUrl}}/my/puzzles",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		},
		{
			"name": "Get one puzzle",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://localhost:8090/my/puzzles/{{puzzleId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"my",
						"puzzles",
						"{{puzzleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Update puzzle",
			"request": {
				"method": "PUT",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "piecesNumber",
							"value": "100",
							"type": "text"
						},
						{
							"key": "title",
							"value": "hejsan",
							"type": "text"
						},
						{
							"key": "complete",
							"value": "true",
							"type": "text"
						}
					]
				},
				"url": {
					"raw": "http://localhost:8090/my/puzzles/{{puzzleId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"my",
						"puzzles",
						"{{puzzleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete puzzle",
			"request": {
				"method": "DELETE",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": [
						{
							"key": "image",
							"type": "file",
							"src": "/private/var/folders/n4/wsvj0ryx7wd0fzqmswlq4dv80000gn/T/com.apple.Photos.NSItemProvider/version=1&uuid=F1372EA9-C65B-4A95-83EA-2905274B7C32&mode=compatible&noloc=0.jpeg/IMG_3383.jpeg",
							"disabled": true
						},
						{
							"key": "title",
							"value": "Testbild",
							"type": "text",
							"disabled": true
						}
					]
				},
				"url": {
					"raw": "http://localhost:8090/my/puzzles/{{puzzleId}}",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"my",
						"puzzles",
						"{{puzzleId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Delete user",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {",
							"    pm.response.to.have.status(200);",
							"});",
							"",
							"pm.test(\"User delete success message\", function () {",
							"    let jsonData = pm.response.json();",
							"    pm.expect(jsonData.message).to.eql(\"Account was deleted successfully. You are now logged out.\");",
							"});",
							"",
							"postman.setNextRequest(null);"
						],
						"type": "text/javascript",
						"packages": {}
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/delete-user",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"delete-user"
					]
				}
			},
			"response": []
		},
		{
			"name": "FAILING - Get all puzzles",
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Authorization",
						"value": "Bearer {{accessToken}}",
						"type": "text"
					}
				],
				"body": {
					"mode": "formdata",
					"formdata": []
				},
				"url": {
					"raw": "http://localhost:8090/my/puzzles",
					"protocol": "http",
					"host": [
						"localhost"
					],
					"port": "8090",
					"path": [
						"my",
						"puzzles"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8090",
			"type": "string"
		},
		{
			"key": "username",
			"value": "",
			"type": "string"
		},
		{
			"key": "password",
			"value": "",
			"type": "string"
		},
		{
			"key": "nextUserNumber",
			"value": "0",
			"type": "string"
		},
		{
			"key": "newUsername",
			"value": ""
		},
		{
			"key": "newPassword",
			"value": ""
		},
		{
			"key": "accessToken",
			"value": "",
			"type": "string"
		},
		{
			"key": "puzzleId",
			"value": ""
		},
		{
			"key": "numberOfPieces",
			"value": ""
		},
		{
			"key": "size",
			"value": ""
		},
		{
			"key": "missingPieces",
			"value": ""
		}
	]
}